<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration>

<!-- 

	## LogBack Log Pattern ##

	- %thread - 실행 쓰레트 명 
	- %msg - 로깅내용 
	- %n - 개행문자(new line)출력 
	- %-5level - 로깅레벨출력, 고정폭(5자리), 로깅레벨이info일 경우 빈칸 하나 추가 
	- %d{yyyy-MM-dd-HH:mm:ss:sss} - 로깅하고 있는 현재 시간, 분, 초, 밀리초 
	- %logger  - 패키지를 포함 클래스 정보 
	- %logger{0} - 패키지를 제외한 클래스 이름만 출력 
	- %method - 로깅하고 있는 클래스의 메소드 
	- %line - 로깅하고 있는 클래스 소스의 line
	
	
	## LogBack Log Level ##
	- TRACE > DEBUG > INFO > WARN > ERROR
	- INFO는 굳이 누가 봐도 상관 없을때 사용하며, 평소에는 INFO를 사용한다
	- DEBUG는 ERROR가 발생 했을 때, SQL결과를 가져올 때 사용하며, 다른사람이 봐서는 안되는 것일 때 이용한다.

 -->



<configuration>
	<!-- console로 log 남기기 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger[%method:%line] - %msg%n</pattern>
        </encoder>
    </appender>
    
    <!-- Mybatis namespace -->
    <logger name="sql" level="OFF" />
    
	<logger name="log4jdbc.debug" level="OFF"/>
	<logger name="org.mybatis" level="OFF"/>
	<logger name="jdbc.connection" level="OFF"/>
	<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
	<logger name="jdbc.sqlonly" level="OFF"/>
	<!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
	<logger name="jdbc.sqltiming" level="DEBUG"/>
	<!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
	<logger name="jdbc.audit" level="OFF"/>
	<!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
	<logger name="jdbc.resultset" level="OFF"/>
	<logger name="jdbc.resultsettable" level="INFO"/>
    
    <root level="INFO">
        <appender-ref ref="console" />
    </root>
	
</configuration>
